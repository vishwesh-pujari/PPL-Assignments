-----------------------------
A-5 Static Single Assignment
-----------------------------

---------
Questions
---------

Q1) Do you notice that each usage of local variable as an operand uses a suffix that can be 
      tracked to it's assignment? Why do some variables have a suffix `(D)'?

A1)    I) In .ssa file, each usage of local variable uses a suffix that can be tracked to it's 
            assignment.
      
      II) The variables which are only declared but not initialized have a suffix "D" in front
            of them.
------------------------------------------------------------------------------------------------

Q2) Find the point in the CFG in which the paths of the two assignments to variable `a' and 
      `b' merge. You will notice that PHI statements have been introduced. Can you guess the 
       syntax of the PHI statements?

A2)    I) After the if-else statements end in the CFG, the paths of 2 assignments to variables
            a and b will merge. Here the PHI statements have been introduced. 

      II) Since it is not possible to determine which of the two branches will be 
            taken at runtime, we donâ€™t know which of a_7 and b_8 or a_5 and b_6 to use 
            during execution. So, the SSA renamer creates a new version a_1 and b_2 which is 
            assigned the result of merging a_7 a_5 and b_8 b_6. This PHI node means that 
            one of the operands is to be taken and it doesn't know which is to be taken.

      III) Syntax of PHI statements is :
             # variable_i = PHI <variable1_i(x), variable2_j(y), variable2_k(z), ...>
             Here i, j, k refer to different versions of variables.
             x, y, z refer to the number of basic blocks(bb).
------------------------------------------------------------------------------------------------

Q3) Can you think of an example in which a PHI node merges more than two versions of a variable?

A3)    I) If we have an else-if ladder or switch statements in the Source code then there will 
            be more than 2 versions of a variable created. At that time a PHI node will merge more 
            than 2 versions of a variable.
            eg. # a_4 = PHI <a_1(3), a_2(4), a_3(5)> 
------------------------------------------------------------------------------------------------