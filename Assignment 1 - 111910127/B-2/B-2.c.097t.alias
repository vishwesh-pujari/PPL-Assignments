
;; Function main (main, funcdef_no=0, decl_uid=1500, cgraph_uid=1, symbol_order=1) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
N = NONLOCAL
N.0_9 = N
a_10 = N.0_9
a_10 = &NONLOCAL
i_11 = &NONLOCAL
N.0_14 = N
a_15 = a_10
a_15 = N.0_14
i_16 = &NONLOCAL
N.0_19 = N
a_20 = a_15
a_20 = N.0_19
i_21 = &NONLOCAL
N.0_24 = N
a_25 = a_20
a_25 = N.0_24
i_26 = &NONLOCAL
ESCAPED = a_25

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as N
STOREDANYTHING = { }
INTEGER = { ANYTHING }
N = { ESCAPED NONLOCAL }
N.0_9 = { ESCAPED NONLOCAL } same as N
a_10 = { ESCAPED NONLOCAL } same as N
i_11 = { NONLOCAL }
N.0_14 = { ESCAPED NONLOCAL } same as N
a_15 = { ESCAPED NONLOCAL } same as N
i_16 = { NONLOCAL } same as i_11
N.0_19 = { ESCAPED NONLOCAL } same as N
a_20 = { ESCAPED NONLOCAL } same as N
i_21 = { NONLOCAL } same as i_11
N.0_24 = { ESCAPED NONLOCAL } same as N
a_25 = { ESCAPED NONLOCAL } same as N
i_26 = { NONLOCAL } same as i_11


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int a;
  int i;
  int N.0_9;
  int N.0_14;
  int N.0_19;
  int N.0_24;

  <bb 2> [local count: 214748369]:
  N.0_9 = N;
  a_10 = N.0_9 + 10;
  i_11 = 1;
  N.0_14 = N;
  a_15 = a_10 + N.0_14;
  i_16 = 2;
  N.0_19 = N;
  a_20 = a_15 + N.0_19;
  i_21 = 3;
  N.0_24 = N;
  a_25 = a_20 + N.0_24;
  i_26 = 4;
  return a_25;

}


