
;; Function main (main, funcdef_no=0, decl_uid=1500, cgraph_uid=1, symbol_order=1)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
N = NONLOCAL
N.0_1 = N
a_8 = N.0_1
a_8 = a_3
i_9 = i_2
i_9 = &NONLOCAL
i_2 = &NULL
i_2 = i_9
a_3 = &NONLOCAL
a_3 = a_8
ESCAPED = a_3

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as N
STOREDANYTHING = { }
INTEGER = { ANYTHING }
N = { ESCAPED NONLOCAL }
N.0_1 = { ESCAPED NONLOCAL } same as N
a_8 = { ESCAPED NONLOCAL } same as N
a_3 = { ESCAPED NONLOCAL } same as N
i_9 = { NULL NONLOCAL }
i_2 = { NULL NONLOCAL } same as i_9


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int a;
  int i;
  int N.0_1;

  <bb 2> :
  goto <bb 4>; [INV]

  <bb 3> :
  N.0_1 = N;
  a_8 = N.0_1 + a_3;
  i_9 = i_2 + 1;

  <bb 4> :
  # i_2 = PHI <0(2), i_9(3)>
  # a_3 = PHI <10(2), a_8(3)>
  if (i_2 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return a_3;

}


