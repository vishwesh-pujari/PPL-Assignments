
;; Function main (main, funcdef_no=0, decl_uid=1500, cgraph_uid=1, symbol_order=1) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
N = NONLOCAL
N.0_9 = N
a_10 = N.0_9
a_10 = &NONLOCAL
a_15 = N.0_9
a_15 = a_10
a_20 = N.0_9
a_20 = a_15
a_25 = N.0_9
a_25 = a_20
ESCAPED = a_25

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as N
STOREDANYTHING = { }
INTEGER = { ANYTHING }
N = { ESCAPED NONLOCAL }
N.0_9 = { ESCAPED NONLOCAL } same as N
a_10 = { ESCAPED NONLOCAL } same as N
a_15 = { ESCAPED NONLOCAL } same as N
a_20 = { ESCAPED NONLOCAL } same as N
a_25 = { ESCAPED NONLOCAL } same as N


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
main ()
{
  int a;
  int i;
  int N.0_9;

  <bb 2> [local count: 214748369]:
  N.0_9 = N;
  a_10 = N.0_9 + 10;
  a_15 = N.0_9 + a_10;
  a_20 = N.0_9 + a_15;
  a_25 = N.0_9 + a_20;
  return a_25;

}


